a=104290256438464238265920655110843789355215462446618909362719610248661044655027
b=51377041544373038040355907810892111390501284088151402869947729149784382975340
c=33607469487038655534452887169909251709064921357237953655926459853107316549445
p=11777932795008234937554901192530674345218991539703072132156127068946946972145785796843203243414854874792790874422630471893317874927684942543648149902518429
f1=4393450432502936586942125381637603594967424429450041652241154373587594289593710667561969065441313205238350018007250796310103876164723965465384784041009952
f2=11758359456591126288355398100033811157654788859704663069490658186848940636735180110386914705819056992670969028976783609655478685964439506912465882470156531
f3=4526962740230169131710354844377916940967201676526826430849484531211915498483780757376719893812797798719451042286927996929324321141661155944161904629619229


# solving these equations under mod p by constructing a polynomial ring
F = Zmod(p)
PR.<x,y> = PolynomialRing(F)
eq1 = (a*x*y + b*x - c*y + a*b) - f1
eq2 = (a*x*y - a*b*x + c*y - a*b*c) - f2
eq3 = (a*x*y + a*b*x - b*y + a*c) - f3

# create Ideal from the 2 given polynomials

I = Ideal([eq1, eq2, eq3])
I.groebner_basis()


# this gives us
[x + 11650249479892861833262135850711573507664188181900363395860173439329630371183715098215440272327541148845859693945537888421482028842522893793088668091660982,
 y + 770337479673689728028105176375070664138747518583887496489571135189819954726179853954258276248252717039689166156507082324907343043445779528522601104845181]

# so solving these simple equations gives us x and y values

x = - int(str(I.groebner_basis()[0]).split('+')[1]) % p
y = - int(str(I.groebner_basis()[1]).split('+')[1]) % p

# y = FLAG * x % p
# so solving this equation will give us the flag
x_inv = inverse_mod(x, p)
Flag = int((x_inv * y) % p)
bytes.decode(Flag.to_bytes((Flag.bit_length() + 7) // 8, 'big'), 'utf-8')

# the flag is 'ASCWG{4tt@ck_7h3_Id3@l_w0RlD_0f_Gr0e6N2r$$}'
