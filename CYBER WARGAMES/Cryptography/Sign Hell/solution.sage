# I connected to the server on the specified port and gathered the public data
# and S1 , (S2, M) from 2 messages -> they will be helpful later

p = 1108520673615374204345908715265110289018534999936201332380194160851102476588533067981103260503150446128951382874136815089392669292818500688910312248800573152503855749441
S1 = 885776853806319951231613027189534079658348748323215781433768353973863435647099713687026395314073038276040990671524080721466122402975337692818335276232236344850598419088
S2_1 = 863295356873370484166560122983555609801729004026437862186988744630145082791074833495417409054754254119977363924076662929353434145424534213948530779425689214828140639012
M1 = 19626825910802368774140733939907664630453148826470072802823600187551232385612
S2_2 = 686795478282433755143106802664948525410157935526448405473597385521906551517153571484771828737591061665204354437593229227275358225168052555741056919476616575075826525906
M2 = 72806286902263394705316816549464657379709846016726775599736310511877561077198


# now constructing a polynomial ring under mod p-1
# note multiplying by k in both sides to git rid of k^-1

F = Zmod(p-1)
PR.<a, k> = PolynomialRing(F)
eq1  = (M1 - a * S1)  - S2_1 * k
eq2  = (M2 - a * S1) - S2_2 * k
I = Ideal([eq1, eq2])
I.groebner_basis()


# the result here is quite huge
[2*a*k + 95343560011614794017815062769075199650921473536461451335946932073308313405275388450557601261154230276037875040075228041484833189000582700176453192222961977092442218476*k^2 + 1108520673615374204345908715265110289018534999936201332380194160851102476588533067981103258540378480878798069820258888459766953809718939323692194455472140024420081943618*a + 376383012710028681632757921888910915033083383431677458833229866100552874120166399410258575493383274748017359280400002354876647424681510328717299486520444222680861419164*k,
 16*a + 1013177113603759410328093652496035089367613526399739881044247228777794163183257679530545659241996215852913507834061587047907836103817917988733859056577611175411413530964*k + 732137660905345522713150793376199373985451616504523873546964294750549602468366668570844685009767171380934023593736812734516021868136990360193012762280128929822994330276,
 6*k + 1108520673615374204345908715265110289018534999936201332380194160851102476588533067981103259848893124378900278522844172879517430798451980233837606317691095443142597814166]

# we are only interested in the second and third equations

p = p - 1
k = ( - int(str(I.groebner_basis()[2]).split("+")[1]) % p ) / 6
tmp = (k * 1013177113603759410328093652496035089367613526399739881044247228777794163183257679530545659241996215852913507834061587047907836103817917988733859056577611175411413530964) % p
a = int((- (int(str(I.groebner_basis()[1]).split("+")[2] ) + tmp ) % p ) / 16 )
bytes.decode(a.to_bytes((a.bit_length() + 7) // 8, 'big'), 'utf-8')


# the flag 'ASCWG{R3uS31n9_G4m4l_NoNc3_S19n1n9_1s_50o_B4d_663c7c5c}'